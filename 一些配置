生产环境构建虽然，以上我们将生产环境和开发环境做了略微区分，但是，请注意，我们还是会遵循不重复原则(Don't repeat yourself - DRY)，保留一个“通用”配置。为了将这些配置合并在一起，我们将使用一个名为 webpack-merge 的工具。通过“通用”配置，我们不必在环境特定(environment-specific)的配置中重复代码指令：npm install --save-dev webpack-mergewebpack.config.js 将被以下三个文件替换webpack.common.jswebpack.dev.jswebpack.prod.js初始化 npm，安装 webpack 和 lodash：npm init -ynpm install --save-dev webpack lodashshimmingwebpack 编译器(compiler)能够识别遵循 ES2015 模块语法、CommonJS 或 AMD 规范编写的模块。然而，一些第三方的库(library)可能会引用一些全局依赖（例如 jQuery 中的 $）。这些库也可能创建一些需要被导出的全局变量。这些“不符合规范的模块”就是 shimming 发挥作用的地方。我们不推荐使用全局的东西！在 webpack 背后的整个概念是让前端开发更加模块化。也就是说，需要编写具有良好的封闭性(well contained)、彼此隔离的模块，以及不要依赖于那些隐含的依赖模块（例如，全局变量）。请只在必要的时候才使用本文所述的这些特性。离线环境下运行过npm install http-server --save-dev在package.json配置 http-server dist添加 Workboxnpm install workbox-webpack-plugin --save-dev安装 TypeScript 编译器(compiler)和 loader：npm install --save-dev typescript ts-loader使用第三方库npm install --save-dev @types/lodash