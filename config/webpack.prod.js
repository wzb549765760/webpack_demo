const merge = require("webpack-merge");const UglifyJSPlugin = require('uglifyjs-webpack-plugin');const common = require('./webpack.common.js');const webpack = require('webpack');const CleanWebpackPlugin = require('clean-webpack-plugin');const HtmlWebpackPlugin = require('html-webpack-plugin');const WorkboxPlugin = require('workbox-webpack-plugin');const paths = require('path');var publicPath = paths.servedPath;/** source map*我们鼓励你在生产环境中启用 source map，因为它们对调试源码(debug)和运行基准测试(benchmark tests)很有帮助。虽然有如此强大的功能，* 然而还是应该针对生成环境用途，选择一个构建快速的推荐配置（具体细节请查看 devtool）。对于本指南，我们将在生产环境中使用 source-map 选项，* 而不是我们在开发环境中用到的 inline-source-map：** */module.exports = merge(common, {    devtool: 'source-map',    mode: "production",    output: {        // The build folder.        path: paths.appBuild,        // Generated JS file names (with nested folders).        // There will be one main bundle, and one file per asynchronous chunk.        // We don't currently advertise code splitting but Webpack supports it.        filename: 'static/js/[name].[chunkhash:8].js',        chunkFilename: 'static/js/[name].[chunkhash:8].chunk.js',        // We inferred the "public path" (such as / or /my-project) from homepage.        publicPath: publicPath    },    plugins: [        /*指定环境*/        new CleanWebpackPlugin(),        /*new HtmlWebpackPlugin({            title: 'Production'        }),*/        new webpack.DefinePlugin({            'process.env.NODE_ENV': JSON.stringify('production')        }),        /*        *Workbox 生成更小的js文件        * */        new WorkboxPlugin.GenerateSW({            // 这些选项帮助 ServiceWorkers 快速启用            // 不允许遗留任何“旧的” ServiceWorkers            clientsClaim: true,            skipWaiting: true        })        /*通过指定 entry 配置中未用到的名称，此插件会自动将我们需要的内容提取到单独的包中：manifest*/        /*new webpack.optimize.CommonsChunkPlugin({  不能用了  请用下面的optimization            name: 'manifest',            minChunks: Infinity        }),*/    ],    /*         * 防止重复   在多个组件引用同一个方法的时候 需要去除重复         *         * */    optimization: {        splitChunks:{            name:'common',            minChunks: Infinity        }    },})